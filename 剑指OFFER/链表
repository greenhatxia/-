题目：从尾到头打印链表
很简单，先得到正向，再翻转
def printListFromTailToHead(self, listNode):
        if not listNode:
            return []
        result=[]
        while listNode:
            result.append(listNode.val)
            listNode=listNode.next
        #下面的代码就是一个list翻转操作
        length=len(result)
        start=0
        end=length-1
        while start<end:
            a=result[end]
            result[end]=result[start]
            result[start]=a
            end-=1
            start+=1
        return result
题目：链表中倒数第k个节点
代码来自：https://cuijiahua.com/blog/2017/12/basis_14.html
def FindKthToTail(self, head, k):
        if head == None or k == 0:
            return None
        pbefore=head
        pbehind=head
        for i in range(k-1):#防止k大于链表长度
            if pbefore.next!=None:
                pbefore=pbefore.next
            else:
                return None
        while pbefore.next!= None:
            pbefore=pbefore.next
            pbehind=pbehind.next
        return pbehind
题目：反转链表
书上的思路143
def ReverseList(self, p):
        if not p:
            return None
        pre=None
        while p:
            pnext=p.next
            p.next=pre
            pre=p
            p=pnext
        return pre#返回的是pre
        
题目：合并两个排序的链表
思路书上的147，采用递归，我想用循环没做出来
def Merge(self, p1, p2):
        if p1==None:
            return p2
        if p2==None:
            return p1
        p=None
        if(p1.val<p2.val):
            p=p1
            p.next=self.Merge(p1.next,p2)
        else:
            p=p2
            p.next=self.Merge(p1,p2.next)
        return p
题目：复杂链表的复刻
根据书189改写成python，
def Clone(self, p):
        if not p:
            return None
        dummy = p
        while dummy:
            dnext=dummy.next
            pcopy=RandomListNode(dummy.label)
            pcopy.next=dnext
            dummy.next=pcopy
            dummy=pcopy.next
        dummy=p
        while dummy:
            s=dummy.random
            dnext=dummy.next
            if dummy.random!=None:
                dnext.random=s.next
            dummy=dnext.next
        dummy=p
        copyHead=dummy.next#涉及对python赋值的理解，class是不可变对象（list、dict）
        while dummy:
            copyNode = dummy.next
            dummynext = copyNode.next
            dummy.next = dummynext
            if dummynext:#判断原链表是否还有剩下节点
                copyNode.next = dummynext.next
            else:
                copyNode.next = None
            dummy = dummynext
        return copyHead
题目：链表中环的入口结点
书上140的思路，我自己用python写了一遍
def EntryNodeOfLoop(self, p):
        # write code here
        if (not p) or (not p.next):#至少2个节点才能构成回环
            return None
        slow,fast=p,p.next
        while fast!=slow:
            fast=fast.next
            slow=slow.next
            if fast!=None:
                fast=fast.next
            else:
                return None
        a=fast
        fast=fast.next
        count=1
        while a!=fast:
            count+=1#计算loop个数
            fast=fast.next
        start,end=p,p
        while count:
            count-=1
            end=end.next
        while end!=start:
            end=end.next
            start=start.next
        return start
题目：删除链表中重复的节点
代码来自https://www.nowcoder.com/questionTerminal/fc533c45b73a41b0b44ccba763f866ef
def deleteDuplication(self, pHead):
        # write code here
        if pHead==None or pHead.next==None:
            return pHead
#创建了头结点指向第一个节点，这样第一个pre就有next属性，并且可以通过newHead.next返回第一个结点位置
        newHead=ListNode(-1)
        newHead.next=pHead
        pre=newHead
        p=pHead
        while p and p.next:
            nex=p.next
            val=p.val
            if p.val==nex.val:
                while p and p.val==val:
                    p=p.next
                pre.next=p#处理重复的情况时不用修改pre
            else:
                pre=p
                p=nex
        return newHead.next
题目：重建二叉树
书上思路63，代码来源https://www.nowcoder.com/questionTerminal/8a19cbe657394eeaac2f6ea9b0f6fcf6
def reConstructBinaryTree(self, pre, tin):
        if len(pre) == 0:
            return None
        else:
            root = TreeNode(pre[0])
            pos = tin.index(pre[0])#可用enumerate
            root.left = self.reConstructBinaryTree(pre[1:pos+1], tin[:pos])
            root.right = self.reConstructBinaryTree(pre[pos+1:], tin[pos+1:])
        return root
