题目10：斐波那契数列
def Fibonacci(self, n):
    if n==0:
        return 0
    if n==1:
        return 1
    num1=0
    num2=1
    for i in range(2,n+1):#由于range，所以end要加1
        sum1=num1+num2
        num1=num2
        num2=sum1
    return sum1
本题扩展：青蛙跳台阶的答案和上述一样。
变态青蛙跳台阶：
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
普通青蛙题目是前两项的叠加，变态青蛙是所有前面项的叠加，并加1（因为可以一次跳n阶）
普通和变态的区别在于普通只需要记录n-1和n-2的值，而变态需要记录所有之前的值。
解法1：
def solution(self,N):
    res=[]
    for i in range(num):
        res.append(1+sum(res))
    return res[-1]
解法2：
def solution(self,N):
    return 2**(N-1)
本题扩展：覆盖矩形
思路：由书中思路很容易得出又是斐波那契解法
题目43：连续子数组的最大和
代码来源https://blog.csdn.net/u010636181/article/details/78422169
思路：时间复杂度O（n），遍历数组中的每个元素，先判断之前的子数组之和，
如果小于0，则是有害的，重新开始建立子数组，否则，加上本次元素。
每次遍历时，检查是否得到更大的子数组之和，若是则记录下。
一共需要两个额外变量。
def maxSubArray(self, lists):
        # write your code here
        max_sum = lists[0]
        pre_sum = 0
        for i in lists:
            if pre_sum < 0:
                pre_sum = i
            else:
                pre_sum += i
            if pre_sum > max_sum:
                max_sum =  pre_sum
        return max_sum
