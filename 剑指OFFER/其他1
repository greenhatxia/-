题目：二进制中1的个数
链接：https://www.nowcoder.com/questionTerminal/8ee967e43c2c4ec193b040ea7fbb10b8
来自答案的评论中对使用0xfffff的解释：
n = n & 0xffffffff，在Python中，数的大小是可以无限扩大的，
不会像Java或c++中，数超过32位会溢出，而是继续扩张，所以对于一个负数而言，
进行了这个操作，实际上是提取了负数的后32位（在计算机中以补码形式存在），
前面的任意位呢，则变成了0，比如说 -1，一开始是 111.....(n个1)...11111111，
进行与运算之后，得到，00....(n个0)....111111111（32个1），
变成了含32个1的正数，然后就不用担心负数陷入死循环。
def NumberOf1(self, n):
        # write code here
        count = 0
        if n < 0:
            n = n & 0xffffffff
        while n:
            count += 1
            n = (n - 1) & n
        return count
题目：顺时针打印矩阵
书上162思路重写
class Solution:
    # matrix类型为二维列表，需要返回列表
    def printMatrix(self, matrix):
        rows=len(matrix)
        cols=len(matrix[0])
        start=0
        result=[]
        if rows==0 and cols==0:
            return matrix
        while rows>(2*start) and cols>(2*start):
            endx=cols-1-start
            endy=rows-1-start
            for i in matrix[start][start:endx+1]:
                result.append(i)
            if start<endy:
                for i in range(start+1,endy+1):
                    result.append(matrix[i][endx])
            if start<endy and start<endx:
                for i in range(start,endx):
                    result.append(matrix[endy][start+endx-i-1])
            if start+1<endy and start<endx:
                for i in range(start+1,endy):
                    result.append(matrix[start+endy-i][start])
            start+=1
        return result
题目：最小的K个数
书上209说partition比较难分析，记住即可，第一种方法复杂度O（n）
def GetLeastNumbers_Solution(self, tinput, k):
        # write code here
        n = len(tinput)
        if n<=0 or k>n:
            return []
        if k<=0:#一定要判断，否则超时
            return []
        start = 0
        end = n-1
        index=self.partition(tinput,start,end)
        while index!=k-1:
            if index>k-1:
                index=self.partition(tinput,start,index-1)
            else:
                
                index=self.partition(tinput,index+1,end)
        return sorted(tinput[:k])
    def partition(self,tinput,start,end):#记好这个函数
        if end<=start:
            return start
        base=tinput[start]
        while start<end:
            while start<end and tinput[end]>=base:
                end-=1
            tinput[start]=tinput[end]
            while start<end and tinput[start]<=base:
                start+=1
            tinput[end]=tinput[start]
        tinput[start]=base
        return start
第二种方法：适用于海量数据处理
背住heapq这个库，思路可以看书211。
堆的逻辑结构就是完全二叉树，并且二叉树中父节点的值小于等于该节点的所有子节点的值。
这种实现可以使用 heap[k] <= heap[2k+1] 并且 heap[k] <= heap[2k+2] 
（其中 k 为索引，从 0 开始计数）的形式体现，对于堆来说，最小元素即为根元素 heap[0]。
时间复杂度O（logk*N），创建k个元素的堆，时间复杂度O（k）；每次从剩下的N-k个元素挑出分别和
这个堆中的最大进行比较，并调整堆，复杂度为logk*（N-k）；两个过程的复杂度加起来就是O（logk*N）
import heapq
class Solution:
    def GetLeastNumbers_Solution(self, alist, k):
        max_heap = []
        length = len(alist)
        if not alist or k <= 0 or k > length:
            return []
        for ele in alist:
            ele = -ele#heapq库是最小堆，所以要用取反来得到max_heap[0]是最大堆中的最大值
            if len(max_heap) <k:
                heapq.heappush(max_heap, ele)
            else:
                heapq.heappushpop(max_heap, ele)
        return sorted([-i for i in max_heap])
题目：整数中1出现的次数
思路：https://cuijiahua.com/blog/2017/12/basis_31.html不是书上的思路
思路为对于1，10，100每个位，计算在该位1出现的次数
对于求k在该位出现的次数，本题k为1，分为x<k,x=k,x>k（0<x<9）三种情况
def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        count=0
        i=1
        while i<=n:
            a=n/i
            b=n%i
            if (a%10==1):#a%10就是该位x，这里是x==k的情况
                count+=(a/10*i)+b+1
            elif (a%10==0):
                count+=(a/10*i)
            else:
                count+=(a/10+1)*i
            i*=10
        return count
用一句代码概括三种条件
def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        count = 0
        i = 1
        while i <= n:
            a = n / i
            b = n % i
            count += (a+8) / 10 * i + (a % 10 == 1)*(b + 1)
            i *= 10
        return count
题目：丑数
def GetUglyNumber_Solution(self, index):
        # write code here
        if index<=0:
            return 0
        nums=[]
        index2=0
        index3=0
        index5=0
        nums.append(1)
        while len(nums)<index:
            num=sorted([nums[index2]*2,nums[index3]*3,nums[index5]*5])
            for i in num:
                if i>nums[-1]:
                    nums.append(i)
                    break
            if nums[-1]==nums[index2]*2:
                index2+=1
            if nums[-1]==nums[index3]*3:
                index3+=1
            if nums[-1]==nums[index5]*5:
                index5+=1
        return nums[-1]
题目：和为S的连续正数序列
思路书上282
链接：https://www.nowcoder.com/questionTerminal/c451a3fd84b64cb19485dad758a55ebe
class Solution:
    def FindContinuousSequence(self, tsum):
        if tsum < 3:
            return []         
        res = []
        small = 1
        big = 2
        mid = (1 + tsum) / 2
        curSum = small + big         
        while small < mid:
            if curSum == tsum:
                res.append(range(small, big + 1))#使用range来表示整个子数列
                curSum-=small
                small +=1
            elif curSum < tsum:
                big += 1
                curSum += big
            else:
                curSum -= small
                small += 1         
        return res
题目：和为S的两个数字
输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的（书里没要求最小，只说任意）。
链接：https://www.nowcoder.com/questionTerminal/390da4f7a00f44bea7c2f3d19491311b
def FindNumbersWithSum(self, array, tsum):
    # 两头开始找匹配，乘积最小必定为最先找到的，如7+8=15 1+14=15乘积1*14小
    low, high = 0, len(array) - 1
    while low < high:
        if array[low] + array[high] > tsum:
            high -= 1
        elif array[low] + array[high] < tsum:
            low += 1
        else:
            return [array[low], array[high]]
    return []  # 匹配失败返回空list
题目：扑克牌顺子
链接：https://www.nowcoder.com/questionTerminal/762836f4d43d43ca9deb273b3de8e1f4
这道题很简单，注意两点
1、如果输入为空，返回false
2、除了王的任何某个特定数值的牌出现两张或者更多，那么一定凑不齐顺子。
思路，先统计王的数量，再把牌排序，如果后面一个数比前面一个数大于1以上，那么中间的差值就必须用王来补了。
看王的数量够不够，如果够就返回true，否则返回false。
def IsContinuous(self, numbers):
    if not numbers:return False
    numbers.sort()
    zeroNum = numbers.count(0)
    for i, v in enumerate(numbers[:-1]):# 注意！！！！！！到-1，但是不包括-1，类似range
        if v != 0:
            if numbers[i+1]==v:return False
            zeroNum = zeroNum - (numbers[i + 1] - v) + 1#加1是因为顺子以步长1顺序递增
            if zeroNum < 0:
                return False
    return True
题目：求1+2+3+…+n
直接记，送分题
def Sum_Solution(self, n):
        # write code here
        ans=n
        temp=ans and self.Sum_Solution(n-1)#当n=0时,and后面的函数不用调用，temp=0
        ans=ans+temp
        return ans
