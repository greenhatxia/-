题目：Search in Rotated Sorted Array I
使用二分法
 def search(self, nums, target):
        if not nums:
            return -1

        low, high = 0, len(nums) - 1

        while low <= high:
            mid = (low + high) / 2
            if target == nums[mid]:
                return mid

            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:#由于if nums[low] <= nums[mid]:没有跳出本次迭代，high、low已经被修改，要用else来使else的内容不会被执行
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1

        return -1
题目：Search in Rotated Sorted Array II
比I多了可能存在重复的元素这个条件，
与上一题（不允许重复）的不同是， 
nums[m] > nums[l] : (l, m-1)单增 
nums[m] <= nums[l] : (m+1, r)不一定单增，因为{1,3,1,1,1} 或{1,1,1,3,1}

此时，可以将上述条件分开来看 
nums[m] < nums[l] : (m+1, r)一定单增 
num[m] == nums[l] : 将 l+1，重新递归计算 （当[l, r],将 r-1）
代码比1只多了两行
 def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if not nums:
            return False
        low, high = 0, len(nums) - 1
        while low <= high:
            while low<high and nums[low]==nums[high]:#比I的代码多的两行
                low+=1
            mid = (low + high) >>1
            if target == nums[mid]:
                return True
            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1
        return False
题目：主元素 majority element
一行代码解决：return sorted(num)[len(num)/2]
~ta&((~c&tb)|(~tb&c))
题目：single number
2n+1个数，其中只有一个数出现了一次，其他都出现了两次，求出这个出现一次的数。
用异或，利用异或运算的组合律不受运算顺序的影响
def singleNumber(self, nums: List[int]) -> int:
        a=0
        for i in nums:
            a^=i
        return a
扩展1: 2n+2个数，其中有两个出现一次，其他出现两次，求这两个出现一次的数。
思路：其中我们取出xor中任何一位1，这里取最低位的1。
这个1一定是A和B中对应位上一个是1一个是0。
所以可以将所有数字分成两类，一类是该位是1的，一类是该位是0的。
分别异或起来就得到A和B了。两类数一定都是奇数个，多出来的一个分别就是A、B
def singleNumberIII(self, A):
s = 0
#将数组A中的数全部异或
for x in A:
s ^= x
#取最低位的1，记住取最低位的套路代码
y = s & (-s)
res = [0, 0]
for x in A:
#将数组A中的数按笔记中的分为两类分别进行异或
if (x & y) != 0:
    res[0] ^= x
else:
    res[1] ^= x
return res
扩展2: 3n+1个非负数，只有一个数出现了一次，其他都出现了三次，求出现一次的数。 公司: 常见的题目
思路来源https://www.nowcoder.com/questionTerminal/1097ca585245418ea2efd0e8b4d9eb7a
    def singleNumberII(self, A):
        # write your code here
        a=0
        b=0
        for c in A:
            ta=a
            tb=b
            a=((~ta)&tb&c)|(ta&(~tb)&(~c))
            b=~ta&((~c&tb)|(~tb&c))
        return a|b
