题目：
def printMatrix(self, matrix):
        # write code here网
        rows=len(matrix)
        cols=len(matrix[0])
        start=0
        result=[]
        if rows==0 and cols==0:
            return matrix
        while rows>(2*start) and cols>(2*start):
            endx=cols-1-start
            endy=rows-1-start
            for i in matrix[start][start:endx+1]:
                result.append(i)
            if start<endy:
                for i in range(start+1,endy+1):
                    result.append(matrix[i][endx])
            if start<endy and start<endx:
                for i in range(start,endx):
                    result.append(matrix[endy][endx-i-1])
            if start+1<endy and start<endx:
                for i in range(start+1,endy):
                    result.append(matrix[endy-i][start])
            start+=1
        return result
题目：二叉树的镜像
思路在书上158，代码来自https://cuijiahua.com/blog/2017/12/basis_18.html
python函数参数改不改变的问题
python里有可变对象和不可变对象之分。只有传入的是不可变对象时，值才不发生改变，若是可变对象，就像c的指针，会改变参数。
不可变对象：Number ,String , Tuple，bool
可变对象： List , Set , Dictionary，class是可以改变内部的元素
def Mirror(self, root):
        # write code here
        if not root or (root.left==None and root.right==None):
            return None
        tmp=root.left
        root.left=root.right
        root.right=tmp
        self.Mirror(root.left)
        self.Mirror(root.right)
题目：从上往下打印二叉树
书上172的思路，https://cuijiahua.com/blog/2017/12/basis_22.html的代码
def PrintFromTopToBottom(self, root):
        if not root:
            return []
        result = []
        tmp = [root]
        while len(tmp):
            cur = tmp.pop(0)
            result.append(cur.val)#返回的是val值得list
            if cur.left:
                tmp.append(cur.left)
            if cur.right:
                tmp.append(cur.right)
        return result
进阶：分行从上往下打印二叉树
思路来自书上174，就是上面代码的基础上增加了两个变量进行判断
创建二维list：
result=[]
final=[]
for i in range(4):
    for j in range(4):
        result.append(i*4+j)
    final.append(result)
    result=[]
print(final)
结果：[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]]
def printFromTopToBottom(self, root):
        if not root:
            return []
        tmp=[root]
        result=[]
        cur=1
        next=0
        final=[]
        while tmp:
            a=tmp.pop(0)
            cur-=1
            result.append(a.val)
            if a.left:
                next+=1
                tmp.append(a.left)
            if a.right:
                next+=1
                tmp.append(a.right)
            if cur==0:
                final.append(result)#记住这种创建二维list的方法！！！！
                result=[]#记得清空！！！！！！
                cur=next
                next=0
        return final
题目：按之字顺序打印二叉树
#不要看书上的思路，分析打印的形状，即可发现和上一题的区别在于偶数行时进行翻转
，所以只需要用一个even变量进行判断并翻转即可
def Print(self, root):
        if not root:
            return []
        tmp=[root]
        result=[]
        cur=1
        next=0
        final=[]
        even=1#比上一个题唯一的改变
        while tmp:
            a=tmp.pop(0)
            cur-=1
            result.append(a.val)
            if a.left:
                next+=1
                tmp.append(a.left)
            if a.right:
                next+=1
                tmp.append(a.right)
            if cur==0:
                even=1-even
                if even:
                    result.reverse()
                final.append(result)
                result=[]
                cur=next
                next=0
        return final
题目：二叉树中和为某一值的路径
思路书上184
代码https://www.nowcoder.com/questionTerminal/b736e784e3e34731af99065031301bca
def FindPath(self, root, expect):
        if not root:
            return []
        result=[]
        path=[]
        def find(root,path,currentsum):
            path.append(root)
            currentsum+=root.val
            if currentsum==expect and (not root.left) and (not root.right):
                #如果直接result.append(path)，
                #因为append是添加引用，下面的path.pop()最终会把path清空，会得到[]
                copy=[]#[]是一个新的对象，所以换了一个地址，不会覆盖之前的copy
                for i in path:
                    copy.append(i.val)
                result.append(copy)
            if currentsum<expect:
                if root.left:
                    find(root.left,path,currentsum )
                if root.right:
                    find(root.right,path,currentsum )
            #currentsum是不可变量，所以不需要currentsum-=root.val
            path.pop()
        find(root,path,0)
        return result
