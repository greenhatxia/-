LeetCode 338 Counting Bits
这道题比较特别的地方是它要你计算从0到n的所有数的二进制形式的1的个数。这个时候很容易想到可以用动态规划来做，
即某个数可以用前面的数得到的结果根据某种特点得到它。这道题要我们计算二进制的1的个数，
我们可以通过i/2的数的1的个数再加上它的最后一位得到。 
这种做法的时间复杂度是O(n)，空间复杂度是O(1)
思路https://blog.csdn.net/westbrook1998/article/details/80152822
def countBits(self, num: int) -> List[int]:
        res=[0]*(num+1)
        for i in range(1,num+1):
            res[i]=res[i&(i-1)]+1
        return res
easy
53. 最大子序和
def maxSubArray(self, nums: List[int]) -> int:
    pre=0
    max_val=nums[0]
    start=0
    length=len(nums)
    for i in range(length):
        pre+=nums[i]
        max_val=max(max_val,pre)
        if pre<=0:
            pre=0            
    return max_val
121.买卖股票
def maxProfit(self, prices: List[int]) -> int:
        if len(prices)==0:
            return 0
        res=0
        #buy不是0
        buy=prices[0]
        #卖只能在买之后，迭代到的每个元素都是卖股票的机会，记录下每次获利；
        for i in range(len(prices)):
            if prices[i]<buy:
                buy=prices[i]
            else:
                res=max(res,prices[i]-buy)
        return res
122。买卖股票II
思路：贪心算法https://www.cnblogs.com/xingyunblog/p/8907084.html

def maxProfit(self, prices: List[int]) -> int:
    if len(prices) == 0:
        return 0
    res = 0
    for i in range(len(prices)):
        #同一天卖出后还可以买进，这样即使后面有更大的卖价也不会损失，总之在比买价低的价格出现之前将它卖掉。
        if i+1<len(prices) and prices[i]<prices[i+1]:
            res+=(prices[i+1]-prices[i])
    return res
198.打家劫舍
思路就是跳楼梯稍微变化https://blog.csdn.net/zwzsdy/article/details/80155649
def rob(self, nums: List[int]) -> int:
    if len(nums)==0:
        return 0
    if len(nums)==1:
        return nums[0]
    if len(nums)==2:
        return max(nums[0],nums[1])
    res=[0 for i in range(len(nums))]
    res[0]=nums[0]
    res[1]=max(nums[0],nums[1])
    for i in range(2,len(nums)):
        res[i]=max(res[i-1],res[i-2]+nums[i])
    return res[-1]
392.判断子序列
def isSubsequence(self, s: str, t: str) -> bool:
        a=0
        b=0
        for i in range(len(s)):
            #i+1字符必须在t字符串里i字符出现的位置后面，所以用了指针b
            for j in range(b,len(t)):
                b+=1
                if s[i]==t[j]:
                    a+=1                  
                    break
        #用a指针判断
        if a==len(s):
            return True
        else:
            return False
1025除数博弈
一行代码解决的思路：https://www.jianshu.com/p/4e65bea09530
数字N如果是奇数，它的约数必然都是奇数；若为偶数，则其约数可奇可偶。
无论N初始为多大的值，游戏最终只会进行到N=2时结束，那么谁轮到N=2时谁就会赢。
因为爱丽丝先手，N初始若为偶数，爱丽丝则只需一直选1，使鲍勃一直面临N为奇数的情况，这样爱丽丝稳赢；
N初始若为奇数，那么爱丽丝第一次选完之后N必为偶数，那么鲍勃只需一直选1就会稳赢
我的理解：先手是奇数时，由于奇数的约数必然都是奇数，所以留给对手的必定是偶数；
谁拿到2谁就胜利，而2是偶数，因此如果你拿到偶数，你只需要让对手一直奇数就可以，即选1.
class Solution {
    public boolean divisorGame(int N) {
        return N % 2 == 0;
    }
}
DP思路：dp[i]只要在[1,i-1]之间找到i%j==0,并且i-j先手失败的case，便能保证爱丽丝胜
def divisorGame(self, N: int) -> bool:
        #定义长度N+1的数组，储存0到N的DP
        dp=[0 for i in range(N+1)]
        for i in range(2,N+1):
            for j in range(1,i):
                if i%j==0 and dp[i-j]==0:
                    dp[i]=1
                    break
        return dp[-1]
题目5：最长回文串
思路：建立dp[i][j]，i是串开头的位置，j是结尾位置，进行填表；
第一个for处理的是n=1,2的情况，range(n-3,-1,-1)处理的是n>2的情况；
每次更新动态表，都要检查if len>len(max_len)；
def longestPalindrome(self, s: str) -> str:
        max_len=""
        n = len(s)
        dp=[[0 for i in range(n)] for i in range(n)]
        for i in range(n):
            dp[i][i]=1
            if len(s[i])>len(max_len):
                   max_len=s[i]
            if i<n-1 and s[i]==s[i+1]:
                dp[i][i+1]=1
                if len(s[i:i+2])>len(max_len):
                    max_len=s[i:i+2]
        #print(dp)
        for i in range(n-3,-1,-1):
            #j=i+1，i的情况在前面已经处理过
            for j in range(i+2,n):
                if s[i]==s[j] and dp[i+1][j-1]:
                    dp[i][j]=1
                    if len(s[i:j+1])>len(max_len):
                        max_len=s[i:j+1]
        return max_len
