替换空格
方法一：
体现剑指offer算法
def replaceSpace(self, s):
        s = list(s)#字符串不能修改，需要转换成list
        l1 = len(s)
        for i in range(len(s)):
            if s[i] == ' ':
                for o in range(2):
                    s.append('0')
        l2 = len(s)
        j = l2 - 1
        for i in range(l1 - 1, -1, -1):
            if s[i] == ' ':
                s[j] = '0'
                j -= 1
                s[j] = '2'
                j -= 1
                s[j] = '%'
                j -= 1
            else:
                s[j] = s[i]
                j -= 1
        return(''.join(s))#有时候用return，有时候是print，记住''.join(list)来连接列表
方法二：
 def replaceSpace(self, s):
        # write code here
        return s.replace(' ', '%20')#记住replace用法
        
        
题目：左旋转字符串
链接：https://www.nowcoder.com/questionTerminal/12d959b108cb42b1ab72cef4d36af5ec
来源：牛客网

这道题考的核心是应聘者是不是可以灵活利用字符串翻转。
假设字符串abcdef，n=3，设X=abc，Y=def，所以字符串可以表示成XY，
如题干，问如何求得YX。T是翻转字符串的意思，假设X的翻转为XT，XT=cba，同理YT=fed，那么YX=(XTYT)T，三次翻转后可得结果。
class Solution:
    def LeftRotateString(self, s, n):
        # write code here
        if len(s)<1:
            return s
        s=list(s)
        length=len(s)
        s=self.fun(s)
        n=n%(length)#处理n大于length的情况
        s[0:length-n]=self.fun(s[0:length-n])
        s[length-n:len(s)]=self.fun(s[length-n:len(s)])
        return ''.join(s)
    def fun(self,s):
        length=len(s)
        start=0
        end=length-1
        while start<end:
            a=s[end]
            s[end]=s[start]
            s[start]=a
            end-=1
            start+=1
        return s

题目：正则表达式匹配
def match(self, s, patten):
        if len(s)==0 and len(patten)==0:
            return True
        elif len(s)!=0 and len(patten)==0:
            return False
        elif len(s)==0 and len(patten)!=0:
            if len(patten)>1 and patten[1]=='*':
                return self.match(s,patten[2:])
            else:
                return False
        else:
            if len(patten)>1 and patten[1]=='*':
                if s[0]==patten[0] or (len(s)!=0 and patten[0]=='.'):
                    return self.match(s,patten[2:]) or self.match(s[1:],patten) or self.match(s[1:],patten[2:])
                else:
                    return self.match(s,patten[2:])
            if s[0]==patten[0] or patten[0]=='.':
                return self.match(s[1:],patten[1:])
            return False
