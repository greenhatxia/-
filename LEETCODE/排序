快速排序
思路：在数列中取一个值，将数组中所有比它小的搬到前面，比它大的搬到后面
参考链接：https://www.cnblogs.com/AlwinXu/p/5424905.html，看大话数据结构辅助理解
def QuickSort(myList,start,end):
    if start<end:#忘了写！！！！
        i=start
        j=end
        key=myList[i]#对key的选择一般选第一个，但是要写成mylist[i]而不是mylist[0]!!!!!!!
        while i<j:
            while (i<j) and (myList[j]>=key):
                j-=1
            myList[i]=myList[j]
            while (i<j) and (myList[i]<=key):
                i+=1
            myList[j]=myList[i]
        myList[i]=key
        QuickSort(myList,start,i-1)
        QuickSort(myList,i+1,end)
    return myList
# 测试代码
myList = [49,38,65,97,76,13,27,49]
print("Quick Sort: ")
QuickSort(myList,0,len(myList)-1)
print(myList)
堆排序
参考链接https://blog.csdn.net/qq_34840129/article/details/80638225
def siftdown(elems, e, begin, end):  # 向下筛选
    i,j=begin,begin*2+1
    while j<end:
        if j+1<end and elems[j]>elems[j+1]:#改变elems[j]>elems[j+1]的<符号可以控制是大堆还是小堆
            j+=1
        if e<=elems[j]:#因为此时上一步的elems[j]还没有被重新赋值为e，所以拿e进行比较
            break
        elems[i]=elems[j]
        i=j
        j=j*2+1
    elems[i]=e
def heap_sort(elems):
    end = len(elems)
    for i in range(end//2-1,-1,-1):
        siftdown(elems,elems[i],i,end)
    #print(elems[0])
    for i in range((end - 1), 0, -1):  # 进行堆排序.i最后一个值为1，不需要到0
        print(elems)
        e=elems[i]
        elems[i]=elems[0]
        elems[0]=e
        siftdown(elems,elems[0],0,i)
    return (elems)
if __name__ == "__main__":
    print(heap_sort([5, 6, 8, 1, 2, 4, 9]))
归纳排序
思路可以看大话数据结构，代码参考https://www.cnblogs.com/Lin-Yi/p/7309143.html
def merge_sort( li ):
    if len(li)==1:
        return li#一定要有return，因为函数里的操作无法对改变函数外的变量，但通过return传递结果，可以生成一个新的list来保存操作的结果,所以一定要有return
    ll=len(li)
    mid=ll>>1
    left=merge_sort(li[:mid])#牢记list的切片，list[:3]不包含list[3]
    right=merge_sort(li[mid:])
    return merge(left,right)
#这里接收两个列表
def merge( left , right ):
    result=[]
    while len(left)>=1 and len(right)>=1:
        if left[0]<right[0]:
            result.append(left.pop(0))
        else:
            result.append(right.pop(0))
    if len(left)>0:
        result+=left
    if len(right)>0:
        result+=right
    return result
if __name__ == '__main__':
    li = [5,4 ,3 ,2 ,1]
    li2 = merge_sort(li)
    print(li2)
