LEETCODE128. 最长连续序列https://leetcode-cn.com/problems/longest-consecutive-sequence/submissions/
思路：书上的思路，我修改成2个merge
class Solution:
    def longestConsecutive(self, nums) :
        if not nums:
            return 0
        count={}
        res=1
        for i in nums:
            if i not in count.keys():
                count[i]=1
                if i-1 in count.keys():
                    res=max(res,self.merge1(count,i-1,i))
                if i+1 in count.keys():
                    res=max(res,self.merge2(count,i,i+1))
            #print(count)
        return (res)
    def merge1(self,count,left,right):
        less=left-count[left]+1
        length=count[less]+count[right]
        count[less]=length
        count[right]=length
        return(length)
    def merge2(self,count,left,right):
        more=right+count[right]-1
        length=count[more]+count[left]
        count[more]=length
        #这里和merge1不同，要考虑count[i]在merge1被修改了,不能只加1
        count[left-count[left]+1]=length
        return(length)

题目：最小路径和
https://leetcode-cn.com/problems/minimum-path-sum/submissions/
思路来自书上187，改写为python
def minPathSum(self, grid: List[List[int]]) -> int:      
        m=len(grid)
        n=len(grid[0])
        path=[[0 for i in range(n)] for j in range(m)]
        path[0][0]=grid[0][0]
        for i in range(1,n):
            path[0][i]=grid[0][i]+path[0][i-1]#在path上加而不是grid
        for j in range(1,m):
            path[j][0]=grid[j][0]+path[j-1][0]
        for i in range(1,m):
            for j in range(1,n):
                path[i][j]=min(path[i-1][j],path[i][j-1])+grid[i][j]
                #print(path)
        return(path[m-1][n-1])
优化空间复杂度为O（min（m,n））,书上188的思路改写，下面代码为了方便复杂度是O（n）
def minPathSum(self, grid: List[List[int]]) -> int:      
        m=len(grid)
        n=len(grid[0])
        #if m==1 or 
        path=[0 for i in range(n)] 
        path[0]=grid[0][0]
        for i in range(1,n):
            path[i]=grid[0][i]+path[i-1]
        #print(path)
        for i in range(1,m):
            for j in range(n):
                if j==0:
                    path[j]=grid[i][j]+path[j]
                else:
                    path[j]=min(path[j],path[j-1])+grid[i][j]
                #print(path)
        return(path[n-1])
换钱的方法数
思路：直接用倒数第二种方法，再进行空间优化
leetcode  https://leetcode-cn.com/problems/coin-change-2/submissions/
def change(self, amount: int, coins: List[int]) -> int:
        if len(coins)==0 and amount==0:
            return 1
        if len(coins)==0 and amount!=0:
            return 0
        dp=[[0 for i in range(amount+1)] for j in range(len(coins))]
        for i in range(len(coins)):
            dp[i][0]=1
        for i in range(amount+1):
            if i%coins[0]==0:
                dp[0][i]=1
        for i in range(1,len(coins)):
            for j in range(1,amount+1):
                dp[i][j]=dp[i-1][j]
                if j-coins[i]>=0:
                    dp[i][j]+=dp[i][j-coins[i]]
        return (dp[len(coins)-1][amount])
机器人达到指定位置方法数
书上的思路用python实现，但是牛客要求求模，所以通过率只有25%
dp=[[0 for j in range(length+1)] for i in range(step+1)]
dp[0][target]=1
mod = 1e9+7
for i in range(1,step+1):
    for j in range(1,length+1):
        if j==1:
            dp[i][j]=dp[i-1][2]
        elif j==length:
            dp[i][j]=dp[i-1][length-1]
        else:
            dp[i][j]=(dp[i-1][j-1]+dp[i-1][j+1])%mod
print (dp[step][cur])
