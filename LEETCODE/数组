题目：Search in Rotated Sorted Array I
使用二分法
 def search(self, nums, target):
        if not nums:
            return -1

        low, high = 0, len(nums) - 1

        while low <= high:
            mid = (low + high) / 2
            if target == nums[mid]:
                return mid

            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:#由于if nums[low] <= nums[mid]:没有跳出本次迭代，high、low已经被修改，要用else来使else的内容不会被执行
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1

        return -1
题目：Search in Rotated Sorted Array II
比I多了可能存在重复的元素这个条件，
与上一题（不允许重复）的不同是， 
nums[m] > nums[l] : (l, m-1)单增 
nums[m] <= nums[l] : (m+1, r)不一定单增，因为{1,3,1,1,1} 或{1,1,1,3,1}

此时，可以将上述条件分开来看 
nums[m] < nums[l] : (m+1, r)一定单增 
num[m] == nums[l] : 将 l+1，重新递归计算 （当[l, r],将 r-1）
代码比1只多了两行
 def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if not nums:
            return False
        low, high = 0, len(nums) - 1
        while low <= high:
            while low<high and nums[low]==nums[high]:#比I的代码多的两行
                low+=1
            mid = (low + high) >>1
            if target == nums[mid]:
                return True
            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1
        return False
题目：主元素 majority element
一行代码解决：return sorted(num)[len(num)/2]
~ta&((~c&tb)|(~tb&c))
题目：single number
2n+1个数，其中只有一个数出现了一次，其他都出现了两次，求出这个出现一次的数。
用异或，利用异或运算的组合律不受运算顺序的影响
def singleNumber(self, nums: List[int]) -> int:
        a=0
        for i in nums:
            a^=i
        return a
扩展1: 2n+2个数，其中有两个出现一次，其他出现两次，求这两个出现一次的数。
思路：其中我们取出xor中任何一位1，这里取最低位的1。
这个1一定是A和B中对应位上一个是1一个是0。
所以可以将所有数字分成两类，一类是该位是1的，一类是该位是0的。
分别异或起来就得到A和B了。两类数一定都是奇数个，多出来的一个分别就是A、B
def singleNumberIII(self, A):
s = 0
#将数组A中的数全部异或
for x in A:
s ^= x
#取最低位的1，记住取最低位的套路代码
y = s & (-s)
res = [0, 0]
for x in A:
#将数组A中的数按笔记中的分为两类分别进行异或
if (x & y) != 0:
    res[0] ^= x
else:
    res[1] ^= x
return res
扩展2: 3n+1个非负数，只有一个数出现了一次，其他都出现了三次，求出现一次的数。 公司: 常见的题目
思路来源https://www.nowcoder.com/questionTerminal/1097ca585245418ea2efd0e8b4d9eb7a
    def singleNumberII(self, A):
        # write your code here
        a=0
        b=0
        for c in A:
            ta=a
            tb=b
            a=((~ta)&tb&c)|(ta&(~tb)&(~c))
            b=~ta&((~c&tb)|(~tb&c))
        return a|b
题目：构建乘积数组
看我的剑指OFFER总结
题目：滑动窗口的最大值
看我的剑指OFFER总结
题目：第k小(大)的数 Kth largerest
def findKthLargest(self, nums: List[int], k: int) -> int:
        if nums==[]:
            return None
        return sorted(nums)[len(nums)-k]
题目：奇偶排序 parity sorted
def sortArrayByParity(self, A: List[int]) -> List[int]:
        odd=[]
        even=[]
        for i in A:
            if i%2==1:
                odd.append(i)
            else:
                even.append(i)
        return even+odd
79单词搜索
思路：剑指OFFER的矩阵中的路径
287.寻找重复数，剑指offer40的思路
def findDuplicate(self, nums: List[int]) -> int:
        def c(nums, start, end):
            cc = 0
            for i in nums:
                if i >= start and i <= end:
                    cc += 1
            return cc
        if not nums:
            return None
        end=len(nums)-1
        start=1
        while start<=end:
            middle = start + ((end - start) >> 1)
            count=c(nums,start,middle)
            if start==end:
                if count>1:
                    return start
                else:
                    return None
            if count>(middle-start+1):
                end=middle
            else:
                start=middle+1
283.移动零
思路：https://zhuanlan.zhihu.com/p/83960079
def moveZeroes(self, nums: List[int]) -> None:
        loc=0
        for i in nums:
            if i!=0:
                nums[loc]=i
                loc+=1
        while loc<len(nums):
            nums[loc]=0
            loc+=1
        return nums
268缺失数字
思路：关键在于索引号和 数建立关系https://zhuanlan.zhihu.com/p/82492980
假如我们数组不缺任何数[0, 1, 2]，我们有0 - nums[0] + 1 - nums[1] + 2 - nums[2] = 0。即使我们打乱数据[2, 0, 1] ，
在不缺少任何数字，不管我们如何打乱数组，我们都有每个数的索引号和该数相减的和都为零
def missingNumber(self, nums: List[int]) -> int:
        res=len(nums)
        #nums的长度只有n（ids从0到n-1），所有res需要额外添加最后一个ids，即n
        for ids,num in enumerate(nums):
            res+=(ids-num)
        return res
旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
def rotate(self, nums: List[int], k: int) -> None:
        n=len(nums)
        #处理k大于n的情况
        k%=n
        tem=[i for i in nums[n-k:]]
        for i in range(n-k):
            nums[n-1-i]=nums[n-k-1-i]
        for i in range(k):
            nums[i]=tem[i]
        return nums
def rotate(self, nums: List[int], k: int) -> None:
    n = len(nums)
    k %= n
    for _ in range(k):
        nums.insert(0, nums.pop())
162寻找峰值
思路官方思路https://leetcode-cn.com/problems/find-peak-element/solution/xun-zhao-feng-zhi-by-leetcode/
非常简单，只要理清峰值可能出现的三种情况即可：递减、递增、凸形（其实还有凹形）
def findPeakElement(self, nums: List[int]) -> int:
        n=len(nums)
        for i in range(n-1):
            if nums[i]>nums[i+1]:
                return i
        return n-1
152乘积最大子序列
思路：左神402
#所有子数组都会以某一个位置结束，迭代求出每一个位置结尾的子数组最大的累乘积
#所有最大累乘积中挑出最大就是结果
def maxProduct(self, nums: List[int]) -> int:
        n=len(nums)
        mins=nums[0]
        maxs=nums[0]
        res=nums[0]
        for i in range(1,n):
            #以i-1位置结尾获得的最大乘积可能在i位置变成最小乘积的乘法项（比如负数*正数）
            #以i-1位置结尾获得的最小乘积可能在i位置变成最大乘积的乘法项（比如负数*负数）
            tem1=nums[i]*mins
            tem2=nums[i]*maxs
            #在三种可能情况中取最值
            mins=min(min(tem1,nums[i]),tem2)
            maxs=max(max(tem1,nums[i]),tem2)
            res=max(res,maxs)
        return res
