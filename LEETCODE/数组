题目：Search in Rotated Sorted Array I
使用二分法
 def search(self, nums, target):
        if not nums:
            return -1

        low, high = 0, len(nums) - 1

        while low <= high:
            mid = (low + high) / 2
            if target == nums[mid]:
                return mid

            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:#由于if nums[low] <= nums[mid]:没有跳出本次迭代，high、low已经被修改，要用else来使else的内容不会被执行
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1

        return -1
题目：Search in Rotated Sorted Array II
比I多了可能存在重复的元素这个条件，
与上一题（不允许重复）的不同是， 
nums[m] > nums[l] : (l, m-1)单增 
nums[m] <= nums[l] : (m+1, r)不一定单增，因为{1,3,1,1,1} 或{1,1,1,3,1}

此时，可以将上述条件分开来看 
nums[m] < nums[l] : (m+1, r)一定单增 
num[m] == nums[l] : 将 l+1，重新递归计算 （当[l, r],将 r-1）
代码比1只多了两行
 def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if not nums:
            return False
        low, high = 0, len(nums) - 1
        while low <= high:
            while low<high and nums[low]==nums[high]:#比I的代码多的两行
                low+=1
            mid = (low + high) >>1
            if target == nums[mid]:
                return True
            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1
        return False
题目：主元素 majority element
一行代码解决：return sorted(num)[len(num)/2]
~ta&((~c&tb)|(~tb&c))
题目：single number
2n+1个数，其中只有一个数出现了一次，其他都出现了两次，求出这个出现一次的数。
用异或，利用异或运算的组合律不受运算顺序的影响
def singleNumber(self, nums: List[int]) -> int:
        a=0
        for i in nums:
            a^=i
        return a
扩展1: 2n+2个数，其中有两个出现一次，其他出现两次，求这两个出现一次的数。
思路：其中我们取出xor中任何一位1，这里取最低位的1。
这个1一定是A和B中对应位上一个是1一个是0。
所以可以将所有数字分成两类，一类是该位是1的，一类是该位是0的。
分别异或起来就得到A和B了。两类数一定都是奇数个，多出来的一个分别就是A、B
def singleNumberIII(self, A):
s = 0
#将数组A中的数全部异或
for x in A:
s ^= x
#取最低位的1，记住取最低位的套路代码
y = s & (-s)
res = [0, 0]
for x in A:
#将数组A中的数按笔记中的分为两类分别进行异或
if (x & y) != 0:
    res[0] ^= x
else:
    res[1] ^= x
return res
扩展2: 3n+1个非负数，只有一个数出现了一次，其他都出现了三次，求出现一次的数。 公司: 常见的题目
思路来源https://www.nowcoder.com/questionTerminal/1097ca585245418ea2efd0e8b4d9eb7a
    def singleNumberII(self, A):
        # write your code here
        a=0
        b=0
        for c in A:
            ta=a
            tb=b
            a=((~ta)&tb&c)|(ta&(~tb)&(~c))
            b=~ta&((~c&tb)|(~tb&c))
        return a|b
题目：构建乘积数组
看我的剑指OFFER总结
题目：滑动窗口的最大值
看我的剑指OFFER总结
题目：第k小(大)的数 Kth largerest
def findKthLargest(self, nums: List[int], k: int) -> int:
        if nums==[]:
            return None
        return sorted(nums)[len(nums)-k]
题目：奇偶排序 parity sorted
def sortArrayByParity(self, A: List[int]) -> List[int]:
        odd=[]
        even=[]
        for i in A:
            if i%2==1:
                odd.append(i)
            else:
                even.append(i)
        return even+odd
79单词搜索
思路：剑指OFFER的矩阵中的路径
287.寻找重复数，剑指offer40的思路
def findDuplicate(self, nums: List[int]) -> int:
        def c(nums, start, end):
            cc = 0
            for i in nums:
                if i >= start and i <= end:
                    cc += 1
            return cc
        if not nums:
            return None
        end=len(nums)-1
        start=1
        while start<=end:
            middle = start + ((end - start) >> 1)
            count=c(nums,start,middle)
            if start==end:
                if count>1:
                    return start
                else:
                    return None
            if count>(middle-start+1):
                end=middle
            else:
                start=middle+1
283.移动零
思路：https://zhuanlan.zhihu.com/p/83960079
def moveZeroes(self, nums: List[int]) -> None:
        loc=0
        for i in nums:
            if i!=0:
                nums[loc]=i
                loc+=1
        while loc<len(nums):
            nums[loc]=0
            loc+=1
        return nums
268缺失数字
思路：关键在于索引号和 数建立关系https://zhuanlan.zhihu.com/p/82492980
假如我们数组不缺任何数[0, 1, 2]，我们有0 - nums[0] + 1 - nums[1] + 2 - nums[2] = 0。即使我们打乱数据[2, 0, 1] ，
在不缺少任何数字，不管我们如何打乱数组，我们都有每个数的索引号和该数相减的和都为零
def missingNumber(self, nums: List[int]) -> int:
        res=len(nums)
        #nums的长度只有n（ids从0到n-1），所有res需要额外添加最后一个ids，即n
        for ids,num in enumerate(nums):
            res+=(ids-num)
        return res
旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
def rotate(self, nums: List[int], k: int) -> None:
        n=len(nums)
        #处理k大于n的情况
        k%=n
        tem=[i for i in nums[n-k:]]
        for i in range(n-k):
            nums[n-1-i]=nums[n-k-1-i]
        for i in range(k):
            nums[i]=tem[i]
        return nums
def rotate(self, nums: List[int], k: int) -> None:
    n = len(nums)
    k %= n
    for _ in range(k):
        nums.insert(0, nums.pop())
162寻找峰值
思路官方思路https://leetcode-cn.com/problems/find-peak-element/solution/xun-zhao-feng-zhi-by-leetcode/
非常简单，只要理清峰值可能出现的三种情况即可：递减、递增、凸形（其实还有凹形）
def findPeakElement(self, nums: List[int]) -> int:
        n=len(nums)
        for i in range(n-1):
            if nums[i]>nums[i+1]:
                return i
        return n-1
152乘积最大子序列
思路：左神402
#所有子数组都会以某一个位置结束，迭代求出每一个位置结尾的子数组最大的累乘积
#所有最大累乘积中挑出最大就是结果
def maxProduct(self, nums: List[int]) -> int:
        n=len(nums)
        mins=nums[0]
        maxs=nums[0]
        res=nums[0]
        for i in range(1,n):
            #以i-1位置结尾获得的最大乘积可能在i位置变成最小乘积的乘法项（比如负数*正数）
            #以i-1位置结尾获得的最小乘积可能在i位置变成最大乘积的乘法项（比如负数*负数）
            tem1=nums[i]*mins
            tem2=nums[i]*maxs
            #在三种可能情况中取最值
            mins=min(min(tem1,nums[i]),tem2)
            maxs=max(max(tem1,nums[i]),tem2)
            res=max(res,maxs)
        return res
118.杨辉三角
思路https://zhuanlan.zhihu.com/p/72084179
#中间项是根据上一行得出，每一行的左右两边是1，所以计算出中间项后在左右两边append（1）
def generate(self, nums: int) -> List[List[int]]:
        n=nums
        res=[]
        for i in range(n):
            tem=[1]
            if not res:
                res.append(tem)
            else:
                for j in range(i-1):
                    tem.append(res[i-1][j]+res[i-1][j+1])
                tem.append(1)
                res.append(tem)
        return res
88. 合并两个有序数组
思路https://zhuanlan.zhihu.com/p/68906039
一句话解释:用大的值填坑
def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        i=m
        j=n
        k=m+n-1
        while i>0 and j>0:
            if nums1[i-1]>nums2[j-1]:
                nums1[k]=nums1[i-1]
                i-=1
            else:
                nums1[k]=nums2[j-1]
                j-=1
            k-=1
        if j>0:
            for i in range(j):
                nums1[i]=nums2[i]
238. 除自身以外数组的乘积
思路：左神410
要求常数的空间复杂度（res是输出不算），且不能用除法。
于是采用两个数组分别存储元素左边和右边的累乘积。
使用一个数组实现上述功能。
def productExceptSelf(self, nums: List[int]) -> List[int]:
        n=len(nums)
        res=[0 for i in range(n)]
        res[0]=nums[0]
        #两端的值需要特殊处理，其余都是元素左边和右边的累乘积
        for i in range(1,n):
            res[i]=res[i-1]*nums[i]
        tem=1
        #range（n-1）而不是range（n），即res[0]需要特殊赋值
        for i in range(n-1):
        #i=n-2时是对res[n-1]的特殊处理（没有右边累乘积）
            res[n-1-i]=res[n-2-i]*tem
            tem*=nums[n-1-i]
        #res[0]特殊处理，此时tem是nums[1:]的累乘积
        res[0]=tem
        return res
289生命游戏
#思路https://zhuanlan.zhihu.com/p/65193128
暴力，速度还可以，思路就是用一个字典，key是坐标元组，储存状态
非常简单，按照题意解题，记住思路即可，不需要重新练习代码
def gameOfLife(self, board: List[List[int]]) -> None:
        row, col =  len(board), len(board[0]) 
        index={}
        for i in range(row):
            for j in range(col): 
                #超出边界的细胞状态都算做0
                judge=sum([sum(item[max(j-1,0):j+2]) for item in board[max(i-1,0):i+2]])-board[i][j] 
 #唯一的技巧，用了list的列表解析不用写一大堆for循环了比较直观好看点
#细胞的出生和死亡是同时发生的，所以需要记录中间状态              
                if judge<2:
                    index[(i,j)]=0
                if judge==2:
                    index[(i,j)]=1
                if judge==3:
                    index[(i,j)]=3
                if judge>3:
                    index[(i,j)]=0
        for item in list(index.keys()):
            #特殊情况是当judge==3时，绝对能存活；其他情况都是&&才能存活
            if index[item]==3:
                board[item[0]][item[1]]=1
                continue
            board[item[0]][item[1]]&=index[item]
11. 盛最多水的容器
思路：https://zhuanlan.zhihu.com/p/63005573
def maxArea(self, height):
        max_wather = 0
        left = 0
        right = len(height)-1
        while left <= right:
            #宽度right-left，高度min(height[left],height[right])
            max_wather = max(max_wather,(right-left)*min(height[left],height[right]))
            #由于必须减小容器宽度，选择高度低的那边
            if height[left]<height[right]:
                left += 1
            elif height[left]>height[right]:
                right -= 1
            else:
                left += 1
                right -= 1
        return max_wather
三数之和
思路：https://zhuanlan.zhihu.com/p/63424986
15.固定一个值,找另外二个值它们和等于 0,
如何找另外两个值,用的是双指针!
def threeSum(self, nums: List[int]) -> List[List[int]]:
        #排序；去除重复的数字
        nums.sort()
        n = len(nums)
        res = []
        #print(nums)
        for i in range(n):
            #必须nums[i] == nums[i - 1]，不能nums[i+1]==nums[i],因为有可能丢解
            if i >0 and nums[i] == nums[i - 1]:
                continue
            start = i + 1
            end = n - 1

            while start < end:
                if nums[i] + nums[start] + nums[end] == 0:
                    tem = [nums[i], nums[start], nums[end]]
                    res.append(tem)
                    #print(i,res)
                    while start<n-1 and nums[start] == nums[start + 1]:
                        start += 1
                    while end>i+1 and nums[end] == nums[end - 1]:
                        end -= 1
                    start+=1
                    end-=1
                elif (nums[i] + nums[start] + nums[end]) < 0:
                    start += 1
                else:
                    end -= 1
        return res
26. 删除排序数组中的重复项
思路：采用快慢两个指针https://zhuanlan.zhihu.com/p/64238606
def removeDuplicates(self, nums: List[int]) -> int:
        slow = 0
        fast = 0
        n = len(nums)
        while fast < n:
            while fast < n - 1 and nums[fast] == nums[fast+1]:
                fast += 1
            #fast指针一直到最后一个重复的元素才停下
            nums[slow] = nums[fast]
            slow += 1
            fast += 1
        return slow
33.搜索旋转排序数组
思路：题目中说明要用O(log n)能想到就是二分法!
剑指OFFER思路，二分法
