题目：Search in Rotated Sorted Array I
使用二分法
 def search(self, nums, target):
        if not nums:
            return -1

        low, high = 0, len(nums) - 1

        while low <= high:
            mid = (low + high) / 2
            if target == nums[mid]:
                return mid

            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:#由于if nums[low] <= nums[mid]:没有跳出本次迭代，high、low已经被修改，要用else来使else的内容不会被执行
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1

        return -1
题目：Search in Rotated Sorted Array II
比I多了可能存在重复的元素这个条件，
与上一题（不允许重复）的不同是， 
nums[m] > nums[l] : (l, m-1)单增 
nums[m] <= nums[l] : (m+1, r)不一定单增，因为{1,3,1,1,1} 或{1,1,1,3,1}

此时，可以将上述条件分开来看 
nums[m] < nums[l] : (m+1, r)一定单增 
num[m] == nums[l] : 将 l+1，重新递归计算 （当[l, r],将 r-1）
代码比1只多了两行
 def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        """
        if not nums:
            return False
        low, high = 0, len(nums) - 1
        while low <= high:
            while low<high and nums[low]==nums[high]:#比I的代码多的两行
                low+=1
            mid = (low + high) >>1
            if target == nums[mid]:
                return True
            if nums[low] <= nums[mid]:
                if nums[low] <= target <= nums[mid]:
                    high = mid - 1
                else:
                    low = mid + 1
            else:
                if nums[mid] <= target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1
        return False
题目：主元素 majority element
一行代码解决：return sorted(num)[len(num)/2]

