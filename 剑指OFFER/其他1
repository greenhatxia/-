题目：二进制中1的个数
链接：https://www.nowcoder.com/questionTerminal/8ee967e43c2c4ec193b040ea7fbb10b8
来自答案的评论中对使用0xfffff的解释：
n = n & 0xffffffff，在Python中，数的大小是可以无限扩大的，
不会像Java或c++中，数超过32位会溢出，而是继续扩张，所以对于一个负数而言，
进行了这个操作，实际上是提取了负数的后32位（在计算机中以补码形式存在），
前面的任意位呢，则变成了0，比如说 -1，一开始是 111.....(n个1)...11111111，
进行与运算之后，得到，00....(n个0)....111111111（32个1），
变成了含32个1的正数，然后就不用担心负数陷入死循环。
def NumberOf1(self, n):
        # write code here
        count = 0
        if n < 0:
            n = n & 0xffffffff
        while n:
            count += 1
            n = (n - 1) & n
        return count
题目：顺时针打印矩阵
书上162思路重写
class Solution:
    # matrix类型为二维列表，需要返回列表
    def printMatrix(self, matrix):
        rows=len(matrix)
        cols=len(matrix[0])
        start=0
        result=[]
        if rows==0 and cols==0:
            return matrix
        while rows>(2*start) and cols>(2*start):
            endx=cols-1-start
            endy=rows-1-start
            for i in matrix[start][start:endx+1]:
                result.append(i)
            if start<endy:
                for i in range(start+1,endy+1):
                    result.append(matrix[i][endx])
            if start<endy and start<endx:
                for i in range(start,endx):
                    result.append(matrix[endy][start+endx-i-1])
            if start+1<endy and start<endx:
                for i in range(start+1,endy):
                    result.append(matrix[start+endy-i][start])
            start+=1
        return result
题目：最小的K个数
书上209说partition比较难分析，记住即可，第一种方法复杂度O（n）
def GetLeastNumbers_Solution(self, tinput, k):
        # write code here
        n = len(tinput)
        if n<=0 or k>n:
            return []
        if k<=0:#一定要判断，否则超时
            return []
        start = 0
        end = n-1
        index=self.partition(tinput,start,end)
        while index!=k-1:
            if index>k-1:
                index=self.partition(tinput,start,index-1)
            else:
                
                index=self.partition(tinput,index+1,end)
        return sorted(tinput[:k])
    def partition(self,tinput,start,end):#记好这个函数
        if end<=start:
            return start
        base=tinput[start]
        while start<end:
            while start<end and tinput[end]>=base:
                end-=1
            tinput[start]=tinput[end]
            while start<end and tinput[start]<=base:
                start+=1
            tinput[end]=tinput[start]
        tinput[start]=base
        return start
第二种方法：适用于海量数据处理
背住heapq这个库，思路可以看书211。
堆的逻辑结构就是完全二叉树，并且二叉树中父节点的值小于等于该节点的所有子节点的值。
这种实现可以使用 heap[k] <= heap[2k+1] 并且 heap[k] <= heap[2k+2] 
（其中 k 为索引，从 0 开始计数）的形式体现，对于堆来说，最小元素即为根元素 heap[0]。
import heapq
class Solution:
    def GetLeastNumbers_Solution(self, alist, k):
        max_heap = []
        length = len(alist)
        if not alist or k <= 0 or k > length:
            return []
        for ele in alist:
            ele = -ele#heapq库是最小堆，所以要用取反来得到max_heap[0]是最大堆中的最大值
            if len(max_heap) <k:
                heapq.heappush(max_heap, ele)
            else:
                heapq.heappushpop(max_heap, ele)
        return sorted([-i for i in max_heap])
