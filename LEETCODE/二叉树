94.二叉树的中序遍历
输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
思路：定义了一个list来进行传递
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res=[]
        return self.p(root,res)
    def p(self,root,res):
        if not root:
            return 
        self.p(root.left,res)
        res.append(root.val)
        self.p(root.right,res)
        return res
98. 验证二叉搜索树
思路：因为二叉搜索树中序遍历是递增的,所以我们可以中序遍历判断前一数是否小于后一个数.
中序遍历可以用上一题的代码
def isValidBST(self, root: TreeNode) -> bool:
        res = []
        def helper(root):
            if not root:
                return 
            helper(root.left)
            res.append(root.val)
            helper(root.right)
        helper(root)
        #别忘了每个节点数值不一样
        return res == sorted(res) and len(set(res)) == len(res)
101.对称二叉树
思路https://zhuanlan.zhihu.com/p/70756777
逐一比较根结点是否相等，左右子节点是否对称
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        return self.check(root,root)
    def check(self,p1,p2):
        if p1==None and p2==None:
            return True
        if p1==None or p2==None:
            return False
        if p1.val!=p2.val:
            return False
        return p1.val==p2.val and self.check(p1.left,p2.right) and self.check(p1.right,p2.left)
102.二叉树的层次遍历
思路：https://zhuanlan.zhihu.com/p/70960724
tmp存节点的val，cur和nex存取的每一层的节点
def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root: return []
        res = []
        cur_level = [root]
        while cur_level:
            tmp = []
            next_level = []
            for node in cur_level:
                #输出是[[3],[9,20],[15,7]]，每一层的节点放在同一个list里
                tmp.append(node.val)
                if node.left:
                    next_level.append(node.left)
                if node.right:
                    next_level.append(node.right)
            res.append(tmp)
            cur_level = next_level
        return res
103. 二叉树的锯齿形层次遍历
#思路：和层次遍历唯一的变化就是记录深度，当dep%2==1时，需要将val（而不是节点）反向一下即可
def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return [] 
        cur=[root]
        res=[]
        dep=0
        while cur:
            tem=[]
            nex=[]
            for i in cur:
                tem.append(i.val)
                if i.left:
                    nex.append(i.left)
                if i.right:
                    nex.append(i.right)
            if dep%2==1:
                tem=tem[::-1]               
            res.append(tem)
            cur=nex
            dep+=1
        return res
104题目：二叉树的深度
def TreeDepth(self, pRoot):
        if pRoot is None:
            return 0
        count = max(self.TreeDepth(pRoot.left),self.TreeDepth(pRoot.right))+1
        return count
108. 将有序数组转换为二叉搜索树
思路https://zhuanlan.zhihu.com/p/71328340
找到数组的中点, 然后分成两部分,每个根结点都是他所有子节点的中间值
比如[-10,-3,0,5,9], 节点0的左边[-10, -3],右边[5, 9]
依次递归下去.
def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        if not nums: return 
        mid = len(nums) // 2
        root = TreeNode(nums[mid])
        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[mid+1:])
        return root
116. 填充每个节点的下一个右侧节点指针
#给next赋值前要检查left和right是否存在
def connect(self, root: 'Node') -> 'Node':
        if not root:
            return None
        if root.left:
            root.left.next=root.right
        if root.right and root.next:
            root.right.next=root.next.left       
        self.connect(root.left)
        self.connect(root.right)
        return root
230. 二叉搜索树中第K小的元素
思路：使用中序遍历建立list，取res[k-1]
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        #使用self.res来传递list
        self.res=[]
        self.k=k
        self.m(root)
        return self.res[k-1]
    def m(self,root):
        if not root:
            #self.res.append("#")
            return 
        self.m(root.left)
        self.res.append(root.val)
        self.m(root.right)
