对于找零问题有两个版本，一个是求找零后零钱的数量最少；另一种求找零的方案数。
题目1
题目描述：
现有的钱币：coins=[1,2,5,7,10]
找零：change（假定为正整数）
求解：如何用最少的钱币进行找零
思路https://blog.csdn.net/xiaolangmin/article/details/90211716
https://blog.csdn.net/asd136912/article/details/79080693
leetcode连接https://leetcode.com/problems/coin-change/submissions/
def coinChange(self, coins: List[int], amount: int) -> int:
        dp=[amount+1]*(amount+1)
        dp[0]=0
        for i in range(1,amount+1):
            for j in coins:
                #零钱小于目标金额，并且比之前的找零方案（dp[i]）数量少，遍历时硬币的面额逐渐变大，dp[i-j]+1是使用该硬币时一共所需要的硬币数量
                if j<=i and dp[i]>dp[i-j]+1:
                    dp[i]=dp[i-j]+1
        if dp[amount]==(amount+1):
            dp[amount]=-1
        return(dp[-1])
